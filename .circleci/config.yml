# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
#test
version: 2.1

orbs:
  python: circleci/python@1.5.0

jobs:
  Build:
    parameters:
      environment:
        type: string
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run Tests
          command: cd src/python/test && pytest -v sample_test.py

  Deploy:
    parameters:
      environment:
        type: string
    docker:
      - image: cimg/python:3.10
        environment:
          TEST_DATABASE_URL: postgresql://postgres@localhost/circle_test
          POSTGRES_USER: postgres
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD # context / project UI env-var reference
      # Service container image
      - image: cimg/postgres:14.0
        environment:
          POSTGRES_USER: postgres
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD # context / project UI env-var reference
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Update Environment
          command: sudo apt-get update
      - run:
          name: Install Postgres Client
          command: sudo apt-get install postgresql-client
      - run: whoami
      - run:
          name: Create Database Tables
          command: |
            psql \
            -d $TEST_DATABASE_URL \
            -c "create user travis;" \
            -c "GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO travis;"
      - run:
          name: Database Connection Test
          command: cd src/python/test && pytest -v connection_test.py

# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  MAIN:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
    jobs:
      - Build:
          name: Build-Production
          environment: prod
          context:
            - DEMO_PROD_AWS
      - Hold:
          name: Approve-Prod-Deploy
          type: approval
          requires:
            - Build-Production
      - Deploy:
          name: Deploy-Production
          environment: prod
          context:
            - DEMO_PROD_AWS
          requires:
            - Approve-Prod-Deploy

  FEATURE:
    when:
      and:
        - not:
            equal: [main, << pipeline.git.branch >>]
    jobs:
      - Build:
          name: Build-DEV
          environment: DEV
          context:
            - DEMO_DEV_AWS

      - Hold:
          name: Approve-Dev-Deploy
          type: approval
          requires:
            - Build-DEV
      - Deploy:
          name: Deploy-DEV
          environment: dev
          context:
            - DEMO_DEV_AWS
          requires:
            - Approve-Dev-Deploy
